#X3D V3.3 utf8
#X3D-to-ClassicVRML serialization autogenerated by X3DPSAIL x3d.py

PROFILE Immersive
META "title" "MaterialModulator.x3d"
META "description" "Mimic a Material node and modulate the diffuseColor field as an animation effect, provided as a prototype for reusability."
META "hint" "Learning suggestion for authors: try changing the modulation script so that it goes from [0 ... 1] and then [1 ... 0] alternating, rather than abruptly shifting from 1 immediately back to 0."
META "creator" "Don Brutzman"
META "created" "10 March 2008"
META "modified" "20 October 2019"
META "subject" "X3D prototype requiring Script inputOutput fields"
META "Image" "MaterialModulator.png"
META "identifier" "https://www.web3d.org/x3d/content/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulator.x3d"
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "license" "../license.html"
WorldInfo {
      title "MaterialModulator.x3d" 
    }
    ProtoDeclare {
      appinfo "mimic a Material node and modulate the diffuseColor field as an animation effect"
      documentation "https://www.web3d.org/x3d/content/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html"
      name "MaterialModulator"
      ProtoInterface ProtoInterface {
        field [
          field {
          accessType "inputOutput"
          appinfo "default value true"
          name "enabled"
          type "SFBool"
          value True 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0.8 0.8 0.8"
          name "diffuseColor"
          type "SFColor"
          value (0.8, 0.8, 0.8) 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0 0 0"
          name "emissiveColor"
          type "SFColor"
          value (0, 0, 0) 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0 0 0"
          name "specularColor"
          type "SFColor"
          value (0, 0, 0) 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0.0"
          name "transparency"
          type "SFFloat" 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0.2"
          name "shininess"
          type "SFFloat"
          value 0.2 
        }
        field {
          accessType "inputOutput"
          appinfo "default value 0.2"
          name "ambientIntensity"
          type "SFFloat"
          value 0.2 
        }
        
        ]
       
      }
      
      ProtoBody ProtoBody {
        children [
          DEF MaterialNode Material {
          IS IS {
            connect [
              connect {
              nodeField "diffuseColor"
              protoField "diffuseColor" 
            }
            connect {
              nodeField "emissiveColor"
              protoField "emissiveColor" 
            }
            connect {
              nodeField "specularColor"
              protoField "specularColor" 
            }
            connect {
              nodeField "transparency"
              protoField "transparency" 
            }
            connect {
              nodeField "shininess"
              protoField "shininess" 
            }
            connect {
              nodeField "ambientIntensity"
              protoField "ambientIntensity" 
            }
            
            ]
           
          }
           
        }
        DEF MaterialModulatorScript Script {
          url "
ecmascript:
function initialize ()
{
    newColor = diffuseColor; // start with original color
}
function clockTrigger (timeValue)
{
    if (!enabled) return;
    red   = newColor.r;
    green = newColor.g;
    blue  = newColor.b;
    
    // note different modulation rates for each color component, % is modulus operator
    newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
	if (enabled)
	{
		Browser.println ('diffuseColor=(' + red +',' + green + ',' + blue + ') newColor=' + newColor.toString());
	}
}
function set_enabled (newValue)
{
	enabled = newValue;
}
"
          field [
            field {
            accessType "inputOutput"
            name "enabled"
            type "SFBool" 
          }
          field {
            accessType "inputOutput"
            name "diffuseColor"
            type "SFColor" 
          }
          field {
            accessType "outputOnly"
            name "newColor"
            type "SFColor" 
          }
          field {
            accessType "inputOnly"
            name "clockTrigger"
            type "SFTime" 
          }
          
          ]
        
          IS IS {
            connect [
              connect {
              nodeField "enabled"
              protoField "enabled" 
            }
            connect {
              nodeField "diffuseColor"
              protoField "diffuseColor" 
            }
            
            ]
           
          }
           
        }
        
        ROUTE MaterialModulatorScript.newColor TO MaterialNode.diffuseColor
        DEF ModulationClock TimeSensor {
          cycleInterval 0.1
          loop TRUE
          IS IS {
            connect [
              connect {
              nodeField "enabled"
              protoField "enabled" 
            }
            
            ]
           
          }
           
        }
        
        ROUTE ModulationClock.cycleTime TO MaterialModulatorScript.clockTrigger
        
        ]
       
      }
       
    }
    Transform {
      translation 0 1 0
      children [
        Shape {
        geometry Sphere { 
        }
        
        appearance Appearance {
          material ProtoInstance {
            name "MaterialModulator"
            fieldValue [
              fieldValue {
              name "enabled"
              value True 
            }
            fieldValue {
              name "diffuseColor"
              value (0.5, 0.1, 0.1) 
            }
            
            ]
           
          }
           
        }
         
      }
      
      ]
     
    }
    Transform {
      translation 0 -2 0
      children [
        Shape {
        geometry Text {
          string ["enable/disable" "MaterialModulator"]
          fontStyle FontStyle {
            family ["SANS"]
            justify ["MIDDLE" "MIDDLE"]
            style "BOLD" 
          }
           
        }
        
        appearance Appearance {
          material Material {
            diffuseColor 0.9 0.9 0.9 
          }
           
        }
         
      }
      Shape {
        geometry Box {
          size 8 2 0.001 
        }
        
        appearance Appearance {
          material Material {
            transparency 1 
          }
           
        }
         
      }
      DEF TouchTextInterface TouchSensor {
        description "Select to enable/disable MaterialModulator" 
      }
      DEF EventToggler BooleanToggle { 
      }
      
      ROUTE TouchTextInterface.isActive TO EventToggler.set_boolean
      
      ROUTE EventToggler.toggle TO MaterialModulatorInstance.enabled
      
      ]
     
    }
    
